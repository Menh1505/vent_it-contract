/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MessageContract,
  MessageContractInterface,
} from "../../vent_it.sol/MessageContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "getMessages",
    outputs: [
      {
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "contents",
        type: "string[]",
      },
      {
        internalType: "uint256[]",
        name: "timestamps",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSentMessages",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "string",
            name: "content",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MessageContract.Message[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061135e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063b2f7132214610046578063de6f24bb14610078578063e9f593f414610094575b600080fd5b610060600480360381019061005b91906108e2565b6100b2565b60405161006f93929190610be7565b60405180910390f35b610092600480360381019061008d9190610c98565b6103ae565b005b61009c6106ec565b6040516100a99190610e0a565b60405180910390f35b606080606060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090508067ffffffffffffffff81111561011757610116610e2c565b5b6040519080825280602002602001820160405280156101455781602001602082028036833780820191505090505b5093508067ffffffffffffffff81111561016257610161610e2c565b5b60405190808252806020026020018201604052801561019557816020015b60608152602001906001900390816101805790505b5092508067ffffffffffffffff8111156101b2576101b1610e2c565b5b6040519080825280602002602001820160405280156101e05781602001602082028036833780820191505090505b50915060005b818110156103a55760008060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106102405761023f610e5b565b5b906000526020600020906003020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686838151811061028857610287610e5b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508060010180546102d190610eb9565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd90610eb9565b801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b505050505085838151811061036257610361610e5b565b5b6020026020010181905250806002015484838151811061038557610384610e5b565b5b60200260200101818152505050808061039d90610f19565b9150506101e6565b50509193909250565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361041d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041490610fbe565b60405180910390fd5b60008282905011610463576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045a9061102a565b60405180910390fd5b600060405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020014281525090506000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816105a091906111f6565b50604082015181600201555050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161067291906111f6565b506040820151816002015550508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fe2cf7446a11cbcd14cd99ea3a1bb77fb7653a64f4064d660140b5100d001e13c85856040516106de929190611304565b60405180910390a350505050565b6060600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561087157838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546107d690610eb9565b80601f016020809104026020016040519081016040528092919081815260200182805461080290610eb9565b801561084f5780601f106108245761010080835404028352916020019161084f565b820191906000526020600020905b81548152906001019060200180831161083257829003601f168201915b505050505081526020016002820154815250508152602001906001019061074d565b50505050905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108af82610884565b9050919050565b6108bf816108a4565b81146108ca57600080fd5b50565b6000813590506108dc816108b6565b92915050565b6000602082840312156108f8576108f761087a565b5b6000610906848285016108cd565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610944816108a4565b82525050565b6000610956838361093b565b60208301905092915050565b6000602082019050919050565b600061097a8261090f565b610984818561091a565b935061098f8361092b565b8060005b838110156109c05781516109a7888261094a565b97506109b283610962565b925050600181019050610993565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a33578082015181840152602081019050610a18565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a5b826109f9565b610a658185610a04565b9350610a75818560208601610a15565b610a7e81610a3f565b840191505092915050565b6000610a958383610a50565b905092915050565b6000602082019050919050565b6000610ab5826109cd565b610abf81856109d8565b935083602082028501610ad1856109e9565b8060005b85811015610b0d5784840389528151610aee8582610a89565b9450610af983610a9d565b925060208a01995050600181019050610ad5565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610b5e81610b4b565b82525050565b6000610b708383610b55565b60208301905092915050565b6000602082019050919050565b6000610b9482610b1f565b610b9e8185610b2a565b9350610ba983610b3b565b8060005b83811015610bda578151610bc18882610b64565b9750610bcc83610b7c565b925050600181019050610bad565b5085935050505092915050565b60006060820190508181036000830152610c01818661096f565b90508181036020830152610c158185610aaa565b90508181036040830152610c298184610b89565b9050949350505050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c5857610c57610c33565b5b8235905067ffffffffffffffff811115610c7557610c74610c38565b5b602083019150836001820283011115610c9157610c90610c3d565b5b9250929050565b600080600060408486031215610cb157610cb061087a565b5b6000610cbf868287016108cd565b935050602084013567ffffffffffffffff811115610ce057610cdf61087f565b5b610cec86828701610c42565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000606083016000830151610d3c600086018261093b565b5060208301518482036020860152610d548282610a50565b9150506040830151610d696040860182610b55565b508091505092915050565b6000610d808383610d24565b905092915050565b6000602082019050919050565b6000610da082610cf8565b610daa8185610d03565b935083602082028501610dbc85610d14565b8060005b85811015610df85784840389528151610dd98582610d74565b9450610de483610d88565b925060208a01995050600181019050610dc0565b50829750879550505050505092915050565b60006020820190508181036000830152610e248184610d95565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ed157607f821691505b602082108103610ee457610ee3610e8a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f2482610b4b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f5657610f55610eea565b5b600182019050919050565b600082825260208201905092915050565b7f526563697069656e7420616464726573732063616e6e6f74206265207a65726f600082015250565b6000610fa8602083610f61565b9150610fb382610f72565b602082019050919050565b60006020820190508181036000830152610fd781610f9b565b9050919050565b7f4d65737361676520636f6e74656e742063616e6e6f7420626520656d70747900600082015250565b6000611014601f83610f61565b915061101f82610fde565b602082019050919050565b6000602082019050818103600083015261104381611007565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026110ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261106f565b6110b6868361106f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006110f36110ee6110e984610b4b565b6110ce565b610b4b565b9050919050565b6000819050919050565b61110d836110d8565b611121611119826110fa565b84845461107c565b825550505050565b600090565b611136611129565b611141818484611104565b505050565b5b818110156111655761115a60008261112e565b600181019050611147565b5050565b601f8211156111aa5761117b8161104a565b6111848461105f565b81016020851015611193578190505b6111a761119f8561105f565b830182611146565b50505b505050565b600082821c905092915050565b60006111cd600019846008026111af565b1980831691505092915050565b60006111e683836111bc565b9150826002028217905092915050565b6111ff826109f9565b67ffffffffffffffff81111561121857611217610e2c565b5b6112228254610eb9565b61122d828285611169565b600060209050601f831160018114611260576000841561124e578287015190505b61125885826111da565b8655506112c0565b601f19841661126e8661104a565b60005b8281101561129657848901518255600182019150602085019450602081019050611271565b868310156112b357848901516112af601f8916826111bc565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b60006112e38385610f61565b93506112f08385846112c8565b6112f983610a3f565b840190509392505050565b6000602082019050818103600083015261131f8184866112d7565b9050939250505056fea264697066735822122077f257b9e3b1f3c866279988bbcecf6b88424ffbb7f8d830940f992ffb5cc16d64736f6c63430008140033";

type MessageContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageContract__factory extends ContractFactory {
  constructor(...args: MessageContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MessageContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MessageContract__factory {
    return super.connect(runner) as MessageContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageContractInterface {
    return new Interface(_abi) as MessageContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MessageContract {
    return new Contract(address, _abi, runner) as unknown as MessageContract;
  }
}
